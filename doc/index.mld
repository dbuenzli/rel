{0 Rel {%html: <span class="version">%%VERSION%%</span>%}}

Rel is a library for programming with relational databases in OCaml.
It provides:

{ul
{- Combinators to describe tables and translate their rows
   to custom OCaml values.}
{- A mechanism for typing SQL statement parameters and their results.}
{- SQL generation helpers including schema generation from table
   descriptions.}
{- A query language embedded in {e plain} OCaml. Queries are typed,
   composable and compile to a single, flat, SQL query (optional and
    experimental).}
{- Support for SQLite3 databases (optional). Run SQL statements
   and generate OCaml table descriptions for existing databases.}}

{1:manuals Manuals}

These manuals are available:

{ul
{- The {{!page-sqlite3_howto}Sqlite3 howto} explains how to get
   started to query an existing sqlite database.}
{- The {{!page-conventions}[Rel] database modelling conventions} provides
   conventions to model databases in OCaml with [Rel].}
{- The {{!page-sql_stmt_howto}SQL statement typing howto} explains
   the low-level mecanism to type SQL statements.}}

{1:rel The [rel] library}

{!modules:
Rel
Rel_list
}

{1:rel_kit The [rel.kit] library}

{!modules:
Rel_kit
}

{1:rel_sqlite3 The [rel.sqlite3] library}

{!modules:
Rel_sqlite3
}


{1:rel_pool The [rel.pool] library}

{!modules:
Rel_pool
}
