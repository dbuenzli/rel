{0 Rel {%html: <span class="version">%%VERSION%%</span>%}}

Rel is a library for programming with relational databases in OCaml.
It provides:

- Typed combinators to describe database rows and their representation
  as custom OCaml values.
- Typed combinators to describe tables and indices. These descriptions
  can be translated to SQL data definitions or, conversly, generated for
  existing databases (external schema definition).
- Automated schema changes via schema diffing.
- Raw SQL statements typing and SQL generation helpers.
- Query language embedded in *plain* OCaml. Queries are typed,
  composable and compile to a single, flat, SQL query (experimental).
- Support for using SQLite3 databases.

{1:manuals Manuals}

These manuals are available:

- The {{!page-sqlite3_howto}Sqlite3 howto} explains how to get
  started to query an existing sqlite database.
- The {{!page-schema_howto}schema howto} discusses how to manage
  your database schema with Rel.
- The {{!page-sql_stmt_howto}SQL statement typing howto} explains
  the low-level mecanism to type SQL statements.

{1:rel The [rel] library}

{!modules:
Rel
Rel_sql
Rel_query
Rel_list
}

{1:dbms_support Database management systems}

Each of these modules live in its own [rel.*] library.

{!modules:
Rel_sqlite3
}

{1:convenience Convenience libraries}

Each of these modules live in its own [rel.*] library.

{!modules:
Rel_kit
Rel_cli
Rel_pool
}
