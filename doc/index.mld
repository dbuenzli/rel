{0 Rel {%html: <span class="version">%%VERSION%%</span>%}}

Rel is a library for programming with relational databases in OCaml.
It provides:

- Typed combinators to describe database rows and their representation
  as custom OCaml values.
- Typed combinators to describe database schemas. Schemas can be
  translated to SQL data definitions or, conversly, generated for
  existing databases (external schema definition).
- Automated schema changes via schema diffing.
- Raw SQL statements typing and SQL generation helpers.
- Query language embedded in *plain* OCaml. Queries are typed,
  composable and compile to a single, flat, SQL query (experimental).
- Support for using SQLite3 databases.

{1:manuals Manuals}

A few things are {{!todo}TODO}.

These manuals are available:

- The {{!page-sqlite3_quickstart}SQLite3 quick start} explains how
  to get started to query an existing database.
- The {{!page-sqlite3_howto}Sqlite3 howto} has more details and
  tips on how to use [Rel] with SQLite3.
- The {{!page-schema_howto}schema howto} discusses how to manage your
  database schema with Rel.
- The {{!page-sql_stmt_howto}SQL statement typing howto} explains the
  low-level mecanism to type SQL statements.

{1:rel The [rel] library}

{!modules:
Rel
Rel_sql
Rel_query
Rel_list
}

{1:dbms_support Database management systems}

Each of these modules live in its own [rel.*] library.

{!modules:
Rel_sqlite3
}

{1:convenience Convenience libraries}

Each of these modules live in its own [rel.*] library.

{!modules:
Rel_kit
Rel_cli
Rel_pool
}

{1:todo TODO}

- SQLite seems quite unique in not specifying a size for
  text. We likely need to add an int to {!Rel.Type.Text} at some
  point.

- When we try to prepare a statement with a comment, our error
  path through the DB handle gets a misleading out of memory
  error. If we consult the error message of the code it's SQL_MISUSE.
  (?) a bit unclear what the correct workflow is here.

- A simple short, {{!page-tutorial}tutorial}.

- {!Rel} should maybe depend on {!Rel_sql}, or possibly have a
  pre-Rel_sql with the expression language, since we will hit
  recursive dependencies. One issue is that we would like to be able
  to define an expression for the default of columns.  This should be
  parametric on the dialect and/or be a structured SQL expression.

- Having {!Rel_sql.type-dialect} at the level of statements creation
  is a bit annoying. Maybe go back to the idea of having an AST in
  {!Rel_sql.Stmt.src}. The backends then directly act on this. The only thing
  we need is something that is fast to test for equality for caches of
  prepared statements.

- {!Rel.Col} need a collation parameter. Also the [`Expr]
  {!Rel.Col.type-default} case is unsatisfying it should be either an SQL
  expression AST or at least be a function of the dialect (which gets
  us into recursive trouble). Also for indexes this is not as
  expressive as it
  {{:https://www.sqlite.org/syntax/indexed-column.html}could be}.

- Sort-out the naming stuff. For constraints and indices (the
  {!Rel.Table.Index.get_name} stuff is not that great, should we simply
  have [""] as a default and rename when we add to a table ?)

- Table updates or inserts we can likely avoid going through listts of
  {!Rel.Col.value} value but that's not what we have in the API at the
  moment.

- {!Rel_sqlite3} changes. Be smarter on tables changes that involve
  only index/add drops.