{0 Schema management howto}

A few tips on how to manage your database schema with Rel.

{1:def Definition strategy}

Rel lets you decide where you want to define your database schema.
You can define it either {e internally}, with OCaml {!Rel.Table.t}
values or {e externally} using any other tool you may see fit.

An internal OCaml definition can always be switched to an external one
by generating legible SQL data definition statements for the
{!Rel.Table.t} values.

Moving from an external definition to an internal one is also possible if
your external definition uses only features that are can be expressed
into {!Rel.Table.t} values.

More precisely:

- If your schema is defined internally with {!Rel.Table.t} values,
  a {!Rel_sql.Schema.t} value can be derived with the
  {!Rel_sql.Schema.of_tables} function. This value can be translated
  to a sequence of legible SQL data definition statements with the
  {!Rel_sql.Schema.create_stmts} function. Would you need to move
  away from Rel this direction {e always} works.
- If your schema is defined externally, the [rel-$(dbms)] command line
  tools connects to your database to generate legible {!Rel.Table.t}
  definitions. However if the external schema definition uses features
  that cannot be expressed into {!Rel.Table.t} values, it is not
  posssible to recreate the external schema from these values – they
  are nevertheless useful to access the external schema using Rel.

{1:changes Schema change}

The goal of a schema change is to make the {e live schema} of a
database instance to coincide with the {e application's schema}, that
is the schema that your software is assuming to hold.

To support schema changes, Rel provides {!Rel_sql.Schema.t} values
which are low-level SQL schema representations. This representation
can be derived from {!Rel.Table.t} values and be computed on a live
database by connecting to it – see for example
{!Rel_sqlite3.schema_of_db}.

Given a manually provided list of table and column renames (if any),
any two of these {!Rel_sql.Schema.t} values can be compared to
automatically derive the SQL data definition statement needed to bring
one schema to the other.

Note that this only handles structural changes to the database. You may
need to provide additional statements to handle data migrations.

You should always have a careful look at these steps and possibly
tweak them, especially if you do this with externally defined schemas.

{2:single Single live database instance or development mode}

- Get the live database schema
- Derive the steps to move from the live schema to the application schema.
- Check and apply the steps statements to the live schema

{2:released Released schemas}

In this case we need to version the schema. The way to do this is DBMS
dependent. Here a few ways:

- Use the {{:https://www.sqlite.org/pragma.html#pragma_user_version}
  [user_version] pragma} for sqlite3.

The application keeps the latest version of the schema and diff steps
to go from earlier versions to the next version until the latest one.

Before interacting with the database:

- Get the version of the live database.
- Apply the steps to go the next version until the application database
  version is reached.


{1:conventions [Rel] schema conventions}

There's more than one way to model your database in OCaml with [Rel].
The following defines a simple conventions you can follow.

These conventions are followed by the [rel-*] tools when it outputs
the OCaml code needed to support interaction with a pre-existing
database schema, except for the naming conventions which respect those
found in the schema.

{2:names Table and column names}

If you are not using a pre-existing schema:

{ul
{- Table names, keep them singular, lower and snake cased.}
{- Column names, keep them lower, snake cased. Have the primary key
   as the first column and then unless there are few of them
   sort them in alphabetical order.}
{- Relations, use the table names seperated by a [_] to name them.}
{- Indices, use the table name and the indexed columns separated by
   a [_]. {!Rel.Index} does this for you automatically if you don't specify
   a name for the index.}}

{2:table Tables representation}

Given a table named {e n} with columns {e c{_0}, c{_1}, …} define a
module [N] ({e n} capitalized) for it.  This module should have

{ul
{- An abstract type [N.t] for representing table rows.}
{- An [N.row] constructor for the row with arguments in the order of columns.}
{- (Optional) A user friendly [N.v] constructor with labelled arguments.}
{- Accessors [N.c]{_i} projecting the corresponding column {e c{_i}}
   from [N.t] values.}
{- Values [N.c']{_i} of type {!Rel.Col.t} for each corresponding
   column {e c{_i}}.}
{- A value [N.table] of type {!Rel.Table.t} that defines the table.}}

Once you have modelled your tables you can use
{!Rel_sql.Schema.of_tables} and {!Rel_sql.Schema.create_stmts} to
output the corresponding schema in SQL's data definition language.

{2:example Example}

Consider a [person] table which has three columns [id] and
[first_name] and [last_name] columns. The following interface
represents such a table according to the convention.

{[
(** Persons. *)
module Person : sig

  type id = int
  (** The type for person identifiers. *)

  type t
  (** The type for persons. *)

  val v : id:id -> first_name:string -> last_name:string -> t
  (** [v ~id ~first_name ~last_name] is a person with given attributes.
      See accessors for semantics. *)

  val row : int -> string -> string -> t
  (** [row] is unlabelled {!v}. *)

  val id : t -> id
  (** [id p] is the unique identifier of [p]. *)

  val first_name : t -> string
  (** [first_name p] is the first name of [p]. *)

  val last_name : t -> string
  (** [last_name p] is the last name of [p]. *)

  (** {1:table Table} *)

  open Rel

  val id' : (t, id) Col.t
  (** [id'] is the {!id} column. *)

  val first_name' : (t, string) Col.t
  (** [first_name'] is the {!first_name} column. *)

  val last_name' : (t, string) Col.t
  (** [last_name'] is the {!last_name} column. *)

  val table : t Table.t
  (** [table] is the person table. *)
end
]}

The simplest way of implementing this signature is by using OCaml records.
For example:

{[
module Person = struct
  type id = int
  type t = { id : id; first_name : string; last_name : string }

  let v ~id ~first_name ~last_name = { id; first_name; last_name }
  let row id first_name last_name = { id; first_name; last_name }

  let id r = r.id
  let first_name r = r.first_name
  let last_name r = r.last_name

  open Rel

  let id' = Col.v "id" ~params:[Col.Primary_key] Type.Int id
  let first_name' = Col.v "first_name" Type.Text first_name
  let last_name' = Col.v "last_name" Type.Text last_name

 let table =
   Table.v "person" Row.(unit row * id' * first_name' * last_name')
end
]}
